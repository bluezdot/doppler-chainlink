export const universalRouterAbi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct RouterParameters',
        components: [
          { name: 'permit2', type: 'address', internalType: 'address' },
          { name: 'weth9', type: 'address', internalType: 'address' },
          { name: 'v2Factory', type: 'address', internalType: 'address' },
          { name: 'v3Factory', type: 'address', internalType: 'address' },
          {
            name: 'pairInitCodeHash',
            type: 'bytes32',
            internalType: 'bytes32',
          },
          {
            name: 'poolInitCodeHash',
            type: 'bytes32',
            internalType: 'bytes32',
          },
          { name: 'v4PoolManager', type: 'address', internalType: 'address' },
          {
            name: 'v3NFTPositionManager',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'v4PositionManager',
            type: 'address',
            internalType: 'address',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  { type: 'receive', stateMutability: 'payable' },
  {
    type: 'function',
    name: 'V3_POSITION_MANAGER',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract INonfungiblePositionManager',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'V4_POSITION_MANAGER',
    inputs: [],
    outputs: [
      { name: '', type: 'address', internalType: 'contract IPositionManager' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'execute',
    inputs: [
      { name: 'commands', type: 'bytes', internalType: 'bytes' },
      { name: 'inputs', type: 'bytes[]', internalType: 'bytes[]' },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'execute',
    inputs: [
      { name: 'commands', type: 'bytes', internalType: 'bytes' },
      { name: 'inputs', type: 'bytes[]', internalType: 'bytes[]' },
      { name: 'deadline', type: 'uint256', internalType: 'uint256' },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'msgSender',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'poolManager',
    inputs: [],
    outputs: [
      { name: '', type: 'address', internalType: 'contract IPoolManager' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'uniswapV3SwapCallback',
    inputs: [
      { name: 'amount0Delta', type: 'int256', internalType: 'int256' },
      { name: 'amount1Delta', type: 'int256', internalType: 'int256' },
      { name: 'data', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'unlockCallback',
    inputs: [{ name: 'data', type: 'bytes', internalType: 'bytes' }],
    outputs: [{ name: '', type: 'bytes', internalType: 'bytes' }],
    stateMutability: 'nonpayable',
  },
  { type: 'error', name: 'BalanceTooLow', inputs: [] },
  { type: 'error', name: 'ContractLocked', inputs: [] },
  {
    type: 'error',
    name: 'DeltaNotNegative',
    inputs: [{ name: 'currency', type: 'address', internalType: 'Currency' }],
  },
  {
    type: 'error',
    name: 'DeltaNotPositive',
    inputs: [{ name: 'currency', type: 'address', internalType: 'Currency' }],
  },
  { type: 'error', name: 'ETHNotAccepted', inputs: [] },
  {
    type: 'error',
    name: 'ExecutionFailed',
    inputs: [
      { name: 'commandIndex', type: 'uint256', internalType: 'uint256' },
      { name: 'message', type: 'bytes', internalType: 'bytes' },
    ],
  },
  { type: 'error', name: 'FromAddressIsNotOwner', inputs: [] },
  { type: 'error', name: 'InputLengthMismatch', inputs: [] },
  { type: 'error', name: 'InsufficientBalance', inputs: [] },
  { type: 'error', name: 'InsufficientETH', inputs: [] },
  { type: 'error', name: 'InsufficientToken', inputs: [] },
  {
    type: 'error',
    name: 'InvalidAction',
    inputs: [{ name: 'action', type: 'bytes4', internalType: 'bytes4' }],
  },
  { type: 'error', name: 'InvalidBips', inputs: [] },
  {
    type: 'error',
    name: 'InvalidCommandType',
    inputs: [{ name: 'commandType', type: 'uint256', internalType: 'uint256' }],
  },
  { type: 'error', name: 'InvalidEthSender', inputs: [] },
  { type: 'error', name: 'InvalidPath', inputs: [] },
  { type: 'error', name: 'InvalidReserves', inputs: [] },
  { type: 'error', name: 'LengthMismatch', inputs: [] },
  {
    type: 'error',
    name: 'NotAuthorizedForToken',
    inputs: [{ name: 'tokenId', type: 'uint256', internalType: 'uint256' }],
  },
  { type: 'error', name: 'NotPoolManager', inputs: [] },
  { type: 'error', name: 'OnlyMintAllowed', inputs: [] },
  { type: 'error', name: 'SliceOutOfBounds', inputs: [] },
  { type: 'error', name: 'TransactionDeadlinePassed', inputs: [] },
  { type: 'error', name: 'UnsafeCast', inputs: [] },
  {
    type: 'error',
    name: 'UnsupportedAction',
    inputs: [{ name: 'action', type: 'uint256', internalType: 'uint256' }],
  },
  { type: 'error', name: 'V2InvalidPath', inputs: [] },
  { type: 'error', name: 'V2TooLittleReceived', inputs: [] },
  { type: 'error', name: 'V2TooMuchRequested', inputs: [] },
  { type: 'error', name: 'V3InvalidAmountOut', inputs: [] },
  { type: 'error', name: 'V3InvalidCaller', inputs: [] },
  { type: 'error', name: 'V3InvalidSwap', inputs: [] },
  { type: 'error', name: 'V3TooLittleReceived', inputs: [] },
  { type: 'error', name: 'V3TooMuchRequested', inputs: [] },
  {
    type: 'error',
    name: 'V4TooLittleReceived',
    inputs: [
      {
        name: 'minAmountOutReceived',
        type: 'uint256',
        internalType: 'uint256',
      },
      { name: 'amountReceived', type: 'uint256', internalType: 'uint256' },
    ],
  },
  {
    type: 'error',
    name: 'V4TooMuchRequested',
    inputs: [
      {
        name: 'maxAmountInRequested',
        type: 'uint256',
        internalType: 'uint256',
      },
      { name: 'amountRequested', type: 'uint256', internalType: 'uint256' },
    ],
  },
] as const;
